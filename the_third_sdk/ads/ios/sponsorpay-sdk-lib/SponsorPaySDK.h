//
//  SponsorPaySDK.h
//  SponsorPay iOS SDK
//
//  Copyright (c) 2012 SponsorPay. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "SPOfferWallViewController.h"
#import "SPVirtualCurrencyServerConnector.h"
#import "SPBrandEngageClient.h"
#import "SPInterstitialClient.h"
#import "SPLogger.h"
#import "SPUser.h"
#import "SPCacheManager.h"


/**
 Provides convenience class methods to access the functionality of the SponsorPay SDK
 */

@interface SponsorPaySDK : NSObject


/** @name Starting the SDK */

/**
Provides access to the user.

@discussion User data stores information about the end user. This information is sent as an argument in header of http
request in every call SDK makes to the backend.
@note In order to set up user data use public setter methods provided in SPUser.h
@see SPUser
@code
SPUser *user = [SponsorPaySDK instance].user;
[user setAge:23];
[user setMaritalStatus:SPUserMartialStatusSingle];
@endcode
*/

@property (nonatomic, strong, readonly) SPUser *user;


/**
 Starts the SDK, registering your credentials for all subsequent usages of the SDK functionality.

 @param appId Your SponsorPay application ID.
 @param userId ID of the current user of your application.
 @param securityToken Security token assigned to your app ID to authenticate requests to some resources and validate
 their responses.
 @return A string token that, if you keep several sets of appId - userId combinations, can be used to refer to each one.

 @warning It's necessary to call this method or startWithAutogeneratedUserForAppId:securityToken: at least once every
 time your app runs in order to be able to use any other functionality of the SDK.
 */
+ (NSString *)startForAppId:(NSString *)appId userId:(NSString *)userId securityToken:(NSString *)securityToken;

/**
 Starts the SDK with an autogenerated user, registering your credentials for all subsequent usages of the SDK
 functionality.

 @param appId Your SponsorPay application ID.
 @param securityToken Security token assigned to your app ID to authenticate requests to some resources and validate
 their responses.
 @return A string token that, if you keep several sets of appId - userId combinations, can be used to refer to each one.

 @warning It's necessary to call this method or startForAppId:userId:securityToken: at least once every time your app
 runs in order to be able to use any other functionality of the SDK.
 */
+ (NSString *)startWithAutogeneratedUserForAppId:(NSString *)appId securityToken:(NSString *)securityToken;

/** @name Using the Mobile OfferWall */

/**
 Returns an SPOfferWallViewController instance configured with the appId and userId passed in a previous invocation of
 the SDK start method

 @return An instance of SPOfferWallViewController configured with the appId and userId provided previously to the SDK
 start method.

 @see showOfferWallWithParentViewController:

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will return an instance configured with the
 latest credentials.
 */
+ (SPOfferWallViewController *)offerWallViewController;


/**
 Returns an SPOfferWallViewController instance configured with the appId and userId passed in a previous invocation of
 the SDK start method

 @param credentialsToken The credentials string token returned by a previous invocation of the SDK start method whose
 appId and userId will be configured in the returned SPOfferWallViewController instance. If you pass an invalid
 credentials token, this method will throw an exception.

 @return An instance of SPOfferWallViewController configured with the appId and userId corresponding to the provided
 credentials token.
*/
+ (SPOfferWallViewController *)offerWallViewControllerForCredentials:(NSString *)credentialsToken;


/**
 Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.

 @param parent An instance of your own UIViewController subclass that will be used as the parent view controller of the
 presented OfferWall. It must conform to the SPOfferWallViewControllerDelegate protocol, and will be notified whenever
 the OfferWall is closed.

 @return The instance of SPOfferWallViewController which is being presented.

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will return an instance configured with the
 latest credentials.

 */
+ (SPOfferWallViewController *)showOfferWallWithParentViewController:(UIViewController<SPOfferWallViewControllerDelegate> *)parent;


/**
 *  Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.
 *
 *  @param parent      The view controller the offerwall's gonna presented in
 *  @param placementId The ID of the ad placement
 *
 *  @return The instance of SPOfferWallViewController which is being presented.
 */
+ (SPOfferWallViewController *)showOfferWallWithParentViewController:(UIViewController<SPOfferWallViewControllerDelegate> *)parent placementId:(NSString *)placementId;


/**
 Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.

 @param parent An instance of your own UIViewController subclass that will be used as the parent view controller of the
 presented OfferWall. It must conform to the SPOfferWallViewControllerDelegate protocol, and will be notified whenever
 the OfferWall is closed.

 @param block A block of type OfferWallCompletionBlock that will be executed whenever the offerwall is closed

 @return The instance of SPOfferWallViewController which is being presented.

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will return an instance configured with the
 latest credentials.
 */
+ (SPOfferWallViewController *)showOfferWallWithParentViewController:(UIViewController *)parent
                                                          completion:(OfferWallCompletionBlock)block;

/**
 *  Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.
 *
 *  @param parent      The view controller the offerwall's gonna presented in
 *  @param placementId The ID of the ad placement
 *  @param block       The block executed when the offerwall closes
 *
 *  @return The instance of SPOfferWallViewController which is being presented.
 */
+ (SPOfferWallViewController *)showOfferWallWithParentViewController:(UIViewController *)parent
                                                         placementId:(NSString *)placementId
                                                          completion:(OfferWallCompletionBlock)block;

/** @name Requesting and showing Mobile Brand Engage offers */

/**
 Returns an SPBrandEngageClient instance configured with the appId and userId passed in a previous invocation of the SDK
 start method

 @return An instance of SPBrandEngageClient configured with the appId and userId provided previously to the SDK start
 method.

 @see requestBrandEngageOffersNotifyingDelegate:

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will return an instance configured with the
 latest credentials.
 */
+ (SPBrandEngageClient *)brandEngageClient;

/**
 Returns an SPBrandEngageClient instance configured with the appId and userId passed in a previous invocation of the SDK
 start method

 @param credentialsToken The credentials string token returned by a previous invocation of the SDK start method whose
 appId and userId will be configured in the returned SPBrandEngageClient instance. If you pass an invalid credentials
 token, this method will throw an exception.

 @return An instance of SPBrandEngageClient configured with the appId and userId corresponding to the provided
 credentials token.
 */
+ (SPBrandEngageClient *)brandEngageClientForCredentials:(NSString *)credentialsToken;

/**
 Returns an SPBrandEngageClient instance configured with the appId and userId passed in a previous invocation of the SDK
 start method and your own delegate, and starts requesting an available BrandEngage offer immediately.

 @return An instance of SPBrandEngageClient configured with your delegate object and the appId and userId provided
 previously to the SDK start method.

 @see SPBrandEngageClientDelegate
 @see [SPBrandEngageClient requestOffers]

 @param delegate Instance of one of your classes implementing the SPBrandEngageClientDelegate protocol, which will be
 notified of offers availability and engagement status.

 @see SPBrandEngageClientDelegate.

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will return an instance configured with the
 latest credentials.
 */
+ (SPBrandEngageClient *)requestBrandEngageOffersNotifyingDelegate:(id<SPBrandEngageClientDelegate>)delegate;

/**
 *  Requests offers for the mobile brand engage
 *
 *  @param delegate    An instance of a class implementing the SPBrandEngageClientDelegate protocol
 *  @param placementId The ID of the ad placement
 *
 *  @return An instance of SPBrandEngageClient configured with your delegate object
 */
+ (SPBrandEngageClient *)requestBrandEngageOffersNotifyingDelegate:(id<SPBrandEngageClientDelegate>)delegate placementId:(NSString *)placementId;


/**
 *  Requests offers for the mobile brand engage and automatically query the Virtual Currency Server after a successful video engagement.
 *
 *  @param delegate    An instance of a class implementing the SPBrandEngageClientDelegate protocol
 *  @param placementId The ID of the ad placement
 *  @param currencyId  The currencyId that must be used to fetch the reward. If nil, the default currency will be requested
 *  @param vcsDelegate Any object conforming to the SPVirtualCurrencyConnectionDelegate, which will be notified of the result of the request. If nil, 
 *  the Virtual Currency Server request will not be sent.
 *
 *  @return An instance of SPBrandEngageClient configured with your delegate object
 */
+ (SPBrandEngageClient *)requestBrandEngageOffersNotifyingDelegate:(id<SPBrandEngageClientDelegate>)delegate
                                                       placementId:(NSString *)placementId
                                            queryVCSWithCurrencyId:(NSString *)currencyId
                                                       vcsDelegate:(id<SPVirtualCurrencyConnectionDelegate>)vcsDelegate;

/** @name Accessing the Interstitial client */

/**
 Returns an SPInterstitialClient instance configured with the appId (and potentially userId) passed in a previous
 invocation of any of the SDK start methods (startForAppId:userId:securityToken: or
 startWithAutogeneratedUserForAppId:securityToken:). There is a unique instance of SPInterstitialClient per app. If you
 have started the SDK more than once with different combinations of appId and userId, the combination used to configure
 the SPInterstitialClient will be the one specified when calling the method setCredentialsForInterstitial: (provided
 that this method was called before accessing the interstitialClient instance for the first time). If this method had
 been not called prior to accessing the interstitialClient, the appId - userId combination selected will be the one used
 to start the SDK for the first time.

 @see startForAppId:userId:securityToken:
 @see startWithAutogeneratedUserForAppId:securityToken:
 @see setCredentialsForInterstitial:
 */
+ (SPInterstitialClient *)interstitialClient;

/**

 Checks if an interstitial ad is available. The answer will be delivered asynchronously to your delegate's
 interstitialClient:canShowInterstitial: selector.
 @param delegate Instance of one of your classes implementing the SPInterstitialClientDelegate protocol, which will be
 notified when the interstitial can be shown.
 */
+ (void)checkInterstitialAvailable:(id<SPInterstitialClientDelegate>)delegate;

/**
 *  Check if interstitial ads are available
 *
 *  @param delegate    An instance of a class implementing the SPInterstitialClientDelegate protocol
 *  @param placementId The ID of the ad placement
 */
+ (void)checkInterstitialAvailable:(id<SPInterstitialClientDelegate>)delegate placementId:(NSString *)placementId;

/** Shows an interstitial ad. Check first that one is ready to be shown with checkInterstitialAvailable.
 @param parentViewController View controller on top of which the interstitial will be shown. Some of the underlying SDKs
 attach the interstitial directly to the application's window or access the app's view hierarchy in other ways.
 Therefore this parameter is not guaranteed to be used.
 @see checkInterstitialAvailable:
 **/

+ (void)showInterstitialFromViewController:(UIViewController *)parentViewController;

/**
 Sets the appId / userId combination to be used to configure the SPInterstitialClient instance. If you are using only an
 appId or a single combination of appId / userId then you don't need to call this method.

 @param credentials The credentials string token returned by a previous invocation of the SDK start method whose
 appId and userId will be configured in the returned SPInterstitialClient instance. If you pass an invalid credentials
 token, this method will throw an exception.

 @see startForAppId:userId:securityToken:
 @see startWithAutogeneratedUserForAppId:securityToken:
 @see interstitialClient
 */

+ (void)setCredentialsForInterstitial:(NSString *)credentials;

/** @name Setting the currency name **/

/** Sets the name of your virtual currency.

 @param name This is a human readable, descriptive name of your virtual currency.
 */
+ (void)setCurrencyName:(NSString *)name;

+ (void)setCurrencyName:(NSString *)name forCredentials:(NSString *)credentialsToken;

+ (NSString *)currencyNameForCredentials:(NSString *)credentialsToken;

/** @name Determining if notifications should be shown to the user **/

/** Whether the SDK should show a toast-like notification to the user the first time calling
 [SPVirtualCurrencyServerConnector fetchDeltaOfCoins] after completing an engagement returns a non-zero value.

 An example notification would be @"Congratulations! You've earned XXX coins!!", where 'coins' would be your currency
 name.

 @param shouldShowNotification Default value is YES.

 @see setShowPayoffNotificationOnVirtualCoinsReceived:forCredentials:
 @see setCurrencyName:
 @see [SPVirtualCurrencyServerConnector fetchDeltaOfCoins]
 */
+ (void)setShowPayoffNotificationOnVirtualCoinsReceived:(BOOL)shouldShowNotification;

+ (void)setShowPayoffNotificationOnVirtualCoinsReceived:(BOOL)shouldShowNotification
                                         forCredentials:(NSString *)credentialsToken;

+ (BOOL)shouldShowPayoffNotificationOnVirtualCoinsReceivedForCredentials:(NSString *)credentialsToken;

/** @name Accessing the Virtual Currency Server */

/**
 Returns an SPVirtualCurrencyServerConnector instance configured with the appId, userId and securityToken passed in a
 previous invocation of the SDK start method

 @return An instance of SPVirtualCurrencyServerConnector configured with the appId, userId and securityToken provided
 previously to the SDK start method.

 @see requestDeltaOfCoinsNotifyingDelegate:

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will return an instance configured with the
 latest credentials.
 */
+ (SPVirtualCurrencyServerConnector *)VCSConnector;

/**
 Returns an SPVirtualCurrencyServerConnector instance configured with the appId, userId and securityToken passed in a
 previous invocation of the SDK start method

 @param credentialsToken The credentials string token returned by a previous invocation of the SDK start method whose
 appId, userId and securityToken will be configured in the returned SPVirtualCurrencyServerConnector instance. If you
 pass an invalid credentials token, this method will throw an exception.

 @return An instance of SPVirtualCurrencyServerConnector configured with the appId, userId and securityToken
 corresponding to the provided credentials token.
 */
+ (SPVirtualCurrencyServerConnector *)VCSConnectorForCredentials:(NSString *)credentialsToken;

/**
 Requests to SponsorPay's Virtual Currency Server the amount of coins earned by the user since the last check, notifying
 the provided delegate of the result.

 @param delegate Any object conforming to the SPVirtualCurrencyConnectionDelegate, which will be notified of the result
 of the request.

 @return The instance of SPVirtualCurrencyServerConnector that is being used to access SponsorPay's Virtual Currency
 Server for this request.

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will return an instance configured with the
 latest credentials.
 */
+ (SPVirtualCurrencyServerConnector *)requestDeltaOfCoinsNotifyingDelegate:(id<SPVirtualCurrencyConnectionDelegate>)delegate;

/**
 Requests to SponsorPay's Virtual Currency Server the amount of coins earned by the user since the last check, notifying
 the provided delegate of the result.
 
 @param currencyId The currencyId that must be used to fetch the reward

 @param delegate Any object conforming to the SPVirtualCurrencyConnectionDelegate, which will be notified of the result
 of the request.

 @return The instance of SPVirtualCurrencyServerConnector that is being used to access SponsorPay's Virtual Currency
 Server for this request.

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will return an instance configured with the
 latest credentials.
 */
+ (SPVirtualCurrencyServerConnector *)requestDeltaOfCoinsWithCurrencyId:(NSString *)currencyId delegate:(id<SPVirtualCurrencyConnectionDelegate>)delegate;

/** @name Reporting Rewarded Actions as completed */

/**
 Reports a Rewarded Action ID as completed to the SponsorPay servers.

 @param actionID The ID of the action to report as completed.

 @warning Action IDs can only contain capital letters, numbers, and the underscore (_) sign. If your action ID is not
 correctly formatted this method will throw an exception.

 @warning This method expects that you have already started the SDK. If you've not started the SDK, this method will
 throw an exception. If you have started with more than one credentials, it will use the latest credentials.
 */
+ (void)reportActionCompleted:(NSString *)actionID;

/**
 Reports a Rewarded Action ID as completed to the SponsorPay servers, using the appId corresponding to the passed
 credentials token.

 @param actionID The ID of the action to report as completed.

 @param credentialsToken The credentials string token returned by a previous invocation of the SDK start method. The
 corresponding appId will be used to perform this request. If you pass an invalid credentials token, this method will
 throw an exception.
*/
+ (void)reportActionCompleted:(NSString *)actionID forCredentials:(NSString *)credentialsToken;

/** @name Accessing the Singleton Instance */

+ (SponsorPaySDK *)instance;

/**
 Validates if a credential token is valid. A credential token is valid after the SDK was started using the
 corrensponding appId/userId pair

 @param credentialsToken The credentials to be evaluated

 @return YES if the credentialsToken is valid. Otherwise it returns NO.
 */
+ (BOOL)isCredentialsTokenValid:(NSString *)credentialsToken;

/**
 *  Returns the shared cache manager object used to cache rewarded videos
 *
 *  @return The shared cache manager object
 */
+ (SPCacheManager *)cacheManager;

/**
 Returns the version of the SDK.

 @return The string containing the version of the SDK.
 */
+ (NSString *)versionString;

/** @name Configuring the loggers settings */

/**
 Sets the logging level for all registered loggers. The default value is set to SPLogLevelInfo.

 @param level A logging level
 */
+ (void)setLoggingLevel:(SPLogLevel)level;

@end


/**
 */
FOUNDATION_EXPORT NSString *const SPAppIdKey;

/**
 */
FOUNDATION_EXPORT NSString *const SPUserIdKey;
